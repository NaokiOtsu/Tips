// Generated by CoffeeScript 1.10.0
(function() {
  var Animal, Dog, arr, dog, fib, hello, i, j, len, pos, size, square, val,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  hello = function() {
    return console.log('hello world!!!!!!');
  };

  hello();

  square = function(x) {
    return x * x;
  };

  fib = function(n) {
    if (n < 2) {
      return n;
    } else {
      return fib(n - 1) + fib(n - 2);
    }
  };

  pos = {
    x: 100,
    y: 200,
    dump: function() {
      return console.log(111);
    }
  };

  size = {
    width: 100,
    height: 100
  };

  arr = ['a', 'b', 'c', 'd'];

  for (i = j = 0, len = arr.length; j < len; i = ++j) {
    val = arr[i];
    console.log(i + ": " + val);
  }

  if (typeof myName !== "undefined" && myName !== null) {
    console.log('yes');
  } else {
    console.log('no');
  }

  Animal = (function() {
    function Animal(name) {
      this.name = name;
    }

    Animal.prototype.say = function(word) {
      return console.log(this.name + " said: " + word);
    };

    return Animal;

  })();

  Dog = (function(superClass) {
    extend(Dog, superClass);

    function Dog(name) {
      Dog.__super__.constructor.call(this, name);
    }

    Dog.prototype.say = function(word) {
      return Dog.__super__.say.call(this, "Bowwow, " + word);
    };

    return Dog;

  })(Animal);

  dog = new Dog('Bob');

  dog.say('Hello!');

}).call(this);
